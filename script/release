#!/usr/bin/env bash

set -o nounset -o pipefail -o errexit

var_color() {
  export RED='\033[0;31m'
  export GREEN='\033[0;32m'
  export BLUE='\033[0;34m'
  export YELLOW='\033[33m'
  export RESET='\033[0m'
}

var_read() {
  local SECRET_ARG=""
  if [[ ${3:-} == "secret" ]]; then
    SECRET_ARG="-s"
  fi

  if [[ -z ${!1:-} ]]; then
    if [[ -z ${SCRIPTS_NO_INTERACTIVE:-} ]]; then
      read ${SECRET_ARG?} -r -p "${1}${2:+ [${2}]}=" READ_VALUE
    fi

    eval "${1}=${READ_VALUE:-${2}}"

    if [[ ${SECRET_ARG} == "-s" ]]; then
      printf "\n"
    fi
  elif [[ ${SECRET_ARG} != "-s" ]]; then
    printf "%s=%s\n" "${1}" "${!1}"
  else
    printf "Using secret %s\n" "${1}"
  fi
}

git_is_inside() {
  git rev-parse --is-inside-work-tree 2>&1
}

git_root() {
  if [[ "$(git rev-parse --is-inside-work-tree 2>&1)" != "true" ]]; then
    pwd
    return
  fi

  git rev-parse --show-toplevel
}

git_conventionnal_commits() {
  declare -gA CONVENTIONAL_COMMIT_SCOPES
  CONVENTIONAL_COMMIT_SCOPES['chore']='Changes in the core of the repository'
  CONVENTIONAL_COMMIT_SCOPES['docs']='Documentation only changes'
  CONVENTIONAL_COMMIT_SCOPES['feat']=$(printf 'A new feature for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['fix']=$(printf 'A bug fix for user %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['refactor']=$(printf 'A change that is not a feature not a bug %b(production change)%b' "${RED}" "${RESET}")
  CONVENTIONAL_COMMIT_SCOPES['style']='A change that do not affect the meaning of the code'
  CONVENTIONAL_COMMIT_SCOPES['test']='A new test or correcting existing tests'
}

git_changelog() {
  git_conventionnal_commits

  if [[ "${#}" -ne 2 ]]; then
    printf "%bUsage: git_changelog [END_REF] [START_REF]%b\n" "${RED}" "${RESET}"
    return 1
  fi

  if [[ $(git_is_inside) != "true" ]]; then
    printf "%bnot inside a git tree%b\n" "${YELLOW}" "${RESET}"
    return 2
  fi

  local FEATURES=()
  local FIXES=()
  local MISC=()
  local BREAKING=()

  IFS=$'\n'

  shopt -s nocasematch
  for hash in $(git log --no-merges --pretty=format:'%h' "${1}...${2}"); do
    local VERSION_MESSAGE=""
    local HASH=""
    local TYPE=""
    local BREAK=""

     for line in $(git show -s --format='%h %B' "${hash}" | grep -v '^\s*$'); do
      if [[ -z ${VERSION_MESSAGE} ]] && [[ ${line} =~ ^([0-9a-f]{1,16})\ (revert )?($(IFS='|'; echo "${!CONVENTIONAL_COMMIT_SCOPES[*]}"))(\(.+\))?(\!)?:\ (.*)$ ]]; then

        HASH="${BASH_REMATCH[1]}"
        local REVERT="${BASH_REMATCH[2]}"
        TYPE="${BASH_REMATCH[3]}"
        local COMPONENT="${BASH_REMATCH[4]}"
        local CONTENT="${BASH_REMATCH[6]}"
        BREAK="${BASH_REMATCH[5]}"

        VERSION_MESSAGE="*"

        if [[ -n ${REVERT} ]]; then
          VERSION_MESSAGE+=" **reverted**"
        fi

        if [[ -n ${COMPONENT} ]]; then
          VERSION_MESSAGE+=" *${COMPONENT}*"
        fi

        VERSION_MESSAGE+=" ${CONTENT}"
      fi

      if [[ -z ${VERSION_MESSAGE} ]]; then
        break
      fi

      if [[ ${line} =~ ^BREAKING[-\ ]CHANGE:\ (.*)$ ]]; then
        BREAKING+=("* ${BASH_REMATCH[1]}")
        BREAK=""

        continue
      fi

      if [[ ${line} =~ ^((closes?)|(fix(ed)?))\ (#[0-9]+)$ ]]; then
        VERSION_MESSAGE+=" ${BASH_REMATCH[5]}"
        HASH=""

        continue
      fi
    done

    if [[ -n ${VERSION_MESSAGE} ]]; then
      if [[ -n ${HASH} ]]; then
        VERSION_MESSAGE+=" ${HASH}"
      fi

      if [[ ${TYPE} == "feat" ]]; then
        FEATURES+=("${VERSION_MESSAGE}")
      elif [[ ${TYPE} == "fix" ]]; then
        FIXES+=("${VERSION_MESSAGE}")
      else
        MISC+=("${VERSION_MESSAGE}")
      fi

      if [[ ${BREAK} == "!" ]]; then
        BREAKING+=("${VERSION_MESSAGE}")
      fi
    fi
  done

  if [[ ${#FEATURES[@]} -gt 0 ]]; then
    printf "# Features\n\n%s\n\n" "$(printf "%s\n" "${FEATURES[@]}")"
  fi

  if [[ ${#FIXES[@]} -gt 0 ]]; then
    printf "# Fixes\n\n%s\n\n" "$(printf "%s\n" "${FIXES[@]}")"
  fi

  if [[ ${#MISC[@]} -gt 0 ]]; then
    printf "# Miscellaneous\n\n%s\n\n" "$(printf "%s\n" "${MISC[@]}")"
  fi

  if [[ ${#BREAKING[@]} -gt 0 ]]; then
    printf "# BREAKING CHANGES\n\n%s\n\n" "$(printf "%s\n" "${BREAKING[@]}")"
  fi
}

clean() {
  printf "%bCleaning %s%b\n" "${BLUE}" "${OUTPUT_DIRS}" "${RESET}"

  for OUTPUT_DIR in "${OUTPUT_DIRS[@]}"; do
    rm -rf "${OUTPUT_DIR}"
    mkdir "${OUTPUT_DIR}"
  done
}

build() {
  goreleaser --rm-dist --release-notes=release/CHANGELOG.md
}

get_release_body() {
  if [[ "${#}" -ne 1 ]]; then
    printf "%bUsage: get_release_body [GIT_TAG]%b\n" "${BLUE}" "${RESET}"
    return 1
  fi

  local PREVIOUS_TAG
  PREVIOUS_TAG=$(git tag --sort=-creatordate | grep -v "${1}" | head -n 1)

  git log --no-merges --pretty=format:'%h %s' "${1}...${PREVIOUS_TAG}" | awk '!a[substr($0,8)]++' | awk '{printf "* %s\\n",$0}'
}

version_semver() {
  if [[ $(git_is_inside) != "true" ]]; then
    printf "%bnot inside a git tree%b\n" "${YELLOW}" "${RESET}"
    return 1
  fi

  local PREFIX="v"
  local MAJOR="0"
  local MINOR="0"
  local PATCH="0"

  local CURRENT_VERSION
  CURRENT_VERSION="$(git describe --tag 2> /dev/null | awk -F "-" '{print $1}')"

  if [[ -n ${CURRENT_VERSION} ]]; then
    if ! [[ ${CURRENT_VERSION} =~ ([a-zA-Z]*)([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
      printf "%bcannot parse existing version: %s%b\n" "${RED}" "${CURRENT_VERSION}" "${RESET}"
      return 2
    fi

    local PREFIX="${BASH_REMATCH[1]}"
    local MAJOR="${BASH_REMATCH[2]}"
    local MINOR="${BASH_REMATCH[3]}"
    local PATCH="${BASH_REMATCH[4]}"
  fi

  if [[ ${#} -lt 1 ]]; then
    printf "%bCurrent version is: %s%b\n" "${BLUE}" "${PREFIX}${MAJOR}.${MINOR}.${PATCH}" "${RESET}"
    printf "%bUsage: version_semver [major|minor|patch] [git ref] [quiet]%b\n" "${RED}" "${RESET}"
    return 3
  fi

  case "${1}" in
    "major")
      MAJOR="$(( MAJOR+1 ))"
      MINOR="0"
      PATCH="0"
      ;;

    "minor")
      MINOR="$(( MINOR+1 ))"
      PATCH="0"
      ;;

    "patch")
      PATCH="$(( PATCH+1 ))"
      ;;

    *)
      printf "%bunknown version name: %s%b\n" "${RED}" "${1}" "${RESET}"
      return 4
  esac

  local NEW_VERSION="${PREFIX}${MAJOR}.${MINOR}.${PATCH}"

  printf "%s" "${NEW_VERSION}"
}

release() {
  if [[ $(git_is_inside) != "true" ]]; then
    printf "%bnot inside a git tree%b\n" "${YELLOW}" "${RESET}"
    return 1
  fi

  printf "%bIdentifying semver%b\n" "${BLUE}" "${RESET}"
  var_read VERSION_REF "HEAD"
  var_read PREVIOUS_REF "$(git tag --sort=-creatordate | grep -v "${VERSION_REF}" | head -1)"

  local CHANGELOG
  CHANGELOG=$(git_changelog "${VERSION_REF}" "${PREVIOUS_REF}")
  printf "%bCHANGELOG:%b\n\n%s%b\n\n" "${YELLOW}" "${GREEN}" "${CHANGELOG}" "${RESET}"

  local VERSION_TYPE="patch"
  if [[ ${CHANGELOG} =~ \#\ BREAKING\ CHANGES ]]; then
    VERSION_TYPE="major"
  elif [[ ${CHANGELOG} =~ \#\ Features ]]; then
    VERSION_TYPE="minor"
  fi

  printf "${CHANGELOG}" > release/CHANGELOG.md

  printf "%bRelease seems to be a %b%s%b\n" "${BLUE}" "${YELLOW}" "${VERSION_TYPE}" "${RESET}"
  printf "%bSpecify explicit git tag or major|minor|patch for semver increment%b\n" "${BLUE}" "${RESET}"
  var_read VERSION "${VERSION_TYPE}" ""

  local GIT_TAG
  if [[ ${VERSION} =~ (major|minor|patch) ]]; then
    GIT_TAG=$(version_semver "${VERSION}" "${VERSION_REF}" "quiet")
  else
    GIT_TAG="${VERSION}"
  fi

  git tag -a "${GIT_TAG}" -m "${GIT_TAG}" "${VERSION_REF}"

  printf "%bâœ” Done!%b\n" "${GREEN}" "${RESET}"
}

usage() {
  printf "Usage of %s\n" "${0}"
  printf "clean\n\tClean output directories %s\n" "${OUTPUT_DIRS}"
  printf "build\n\tBuild binary for %s\n" "${OUTPUT_BINARIES[*]}"
  printf "release\n\tGenerate CHANGELOG for Github release and create tag\n"
}

main() {
  var_color

  local ROOT_DIR
  ROOT_DIR="$(git_root)"

  local OUTPUT_DIRS=("${ROOT_DIR}/dist" "${ROOT_DIR}/release")

  for arg in "${@}"; do
    case "${arg}" in
      "build")
        build
        ;;
      "release")
        release
        ;;
      "clean")
        clean
        ;;
      *)
        usage
        ;;
    esac
  done
}

DEFAULT_ARGS=("clean" "release" "build" "clean")
main "${@:-${DEFAULT_ARGS[@]}}"
